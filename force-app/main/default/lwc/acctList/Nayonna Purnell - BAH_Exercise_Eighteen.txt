Nayonna Purnell - BAH_Exercise_Eighteen

********************** acctList html  ********************** 

<template>
    <article class="slds-card">
        <div class="slds-card__header slds-grid">
            <header class="slds-media slds-media_center slds-has-flexi-truncate">
                <div class="slds-media__figure">
                    <span class="slds-icon_container slds-icon-standard-account" title="account">
                        <svg class="slds-icon" aria-hidden="true">
                            <use xlink:href="/_slds/icons/standard-sprite/svg/symbols.svg#account"></use>
                        </svg>
                        <span class="slds-assistive-text">account</span>
                    </span>
                </div>
                <div class="slds-media__body">
                    <h2 class="slds-card__header-title">
                        <a class="slds-card__header-link slds-truncate" title="Accounts">
                            <span>Account List</span>
                        </a>

                        <lightning-layout-item size="9" flexibility="auto" padding="horizontal-small"
                            class="slds-text-align_right">
                            <lightning-button onclick={createAcct} aria-haspopup="dialog" label="New">
                            </lightning-button>
                        </lightning-layout-item>
                    </h2>
                </div>
            </header>
        </div>
        <div class="slds-card__body slds-card__body_inner">
            <p>You have selected: {Id} {Name} </p>
            <!-- Beginning of the Accounts to Display List -->
            <template lwc:if={acctsToDisplay}>
                <template for:each={accts} for:item="acct" for:index="idx">
                    <div key={acct.Id}>
                        <c-acct-card idx={idx} acct-id={acct.Id} acct-name={acct.Name}
                            annual-revenue={acct.AnnualRevenue} phone={acct.Phone}
                            onacctcustomevent={handleAcctEvent}></c-acct-card>
                    </div>
                </template>
            </template>
            <!-- If there are no Accounts to display -->
            <template lwc:else>
                <p>No records to display...</p>
            </template>
        </div>
    </article>
</template>


********************** acctList js ********************** 

import { LightningElement,api,wire } from 'lwc';
import getTopAccounts from '@salesforce/apex/AccountController.getTopAccounts';
import { getRecord } from 'lightning/uiRelatedListApi';
import RecordModal from 'c/recordModal'; // import my custom recordModal component
import { ShowToastEvent } from 'lightning/platformShowToastEvent';

import { refreshApex } from '@salesforce/apex';

export default class AcctList extends LightningElement {
    @api recordId;
    Id;
    Name;
    selectedId;
    selectedName;
    showForm = false;
    idx;


    accts = []; //This will be the property to hold the account records.
    results; //property to hold the object that is provisioned from the wire service
    acctsToDisplay = false; //property to determine if we have accts records returned

   

    @wire(getTopAccounts)
    wireAccounts(acctRecords){

        this.results = acctRecords;


        if(this.results.data){
            this.accts = this.results.data;
            this.acctsToDisplay = true;
            
            console.log(this.results.data);

        }

        if(this.results.error){
            console.error('Error retrieving Accounts...');
            this.acctsToDisplay = false;
        }

    }

   // method to handle the onclick option for the modal to create a new account.
    // create a method that a user can invoke to pen the recordModal component and edit the opportunity record
createAcct(){
    // open the modal window 
    RecordModal.open({
         size: 'small',
         recordId: this.recordId,
         objectApiName: 'Account',
         formMode: 'create',
         layoutType: 'Compact',
         headerLabel: 'Create Account'
    })
    .then((result)=> {
         console.log(result);
         // check to see how the modal window was closed
         if (result){
              // check to see if the result is a success, and is so, dispatch a toast event notification
              if (result.type === 'success'){

                   const myToastEvent = new ShowToastEvent({
                        title: 'Account Saved Successfully',
                        message: 'This account ' + result.detail.fields.Name.value + ' was saved successfully!',
                        variant: 'success',
                        mode: 'dismissible'
                   });

                   // dispatch the toast notification
                   this.dispatchEvent(myToastEvent);
              }
         }
    })
    .catch((error)=> console.error(error));
}



 handleAcctEvent(event){
        this.Id = event.detail.acctId;
        this.Name = event.detail.acctName;
        //this.idx = event.detail.rank;
    }

    refreshRecords(){
        refreshApex(this.results);
    }
    
}// end of acctList.js