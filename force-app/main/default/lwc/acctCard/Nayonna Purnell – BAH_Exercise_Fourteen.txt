
***** Nayonna Purnell â€“ BAH_Exercise_Fourteen.txt *****

***** AccountController class *****

public  class AccountController {
  
    @AuraEnabled
    public static List<Account> getAccounts() {

        List<Account> acctList = [select ID, Name, Phone, AnnualRevenue FROM Account LIMIT 5];

        return acctList;
    }
  
    @AuraEnabled(cacheable=true)
    public static List<Account> getTopAccounts(){
        List<Account> acctList = [SELECT Id,Name, Phone, AnnualRevenue FROM Account WITH SECURITY_ENFORCED ORDER BY AnnualRevenue DESC NULLS LAST LIMIT 5];
       return acctList; 
    }
} 


***** acctList html *****
<template>
    <article class="slds-card">
        <div class="slds-card__header slds-grid">
            <header class="slds-media slds-media_center slds-has-flexi-truncate">
                <div class="slds-media__figure">
                    <span class="slds-icon_container slds-icon-standard-account" title="account">
                        <svg class="slds-icon" aria-hidden="true">
                            <use xlink:href="/_slds/icons/standard-sprite/svg/symbols.svg#account"></use>
                          </svg>
                        <span class="slds-assistive-text">account</span>
                    </span>
                </div>
                <div class="slds-media__body">
                    <h2 class="slds-card__header-title">
                        <a class="slds-card__header-link slds-truncate" title="Accounts">
                            <span>Account List</span>
                        </a>
                    </h2>
                </div>
            </header>    
        </div>
        <div class="slds-card__body slds-card__body_inner">
            <p>You have selected: {Id} {Name}  </p>
            <!-- Beginning of the Accounts to Display List -->
           <template lwc:if={acctsToDisplay}>
            <template for:each={accts} for:item="acct" for:index="idx">          
                <div key={acct.Id}>                   
                    <c-acct-card idx={idx} acct-id={acct.Id} acct-name={acct.Name} annual-revenue={acct.AnnualRevenue} phone={acct.Phone} onacctcustomevent={handleAcctEvent}></c-acct-card>
                </div>
            </template>            
           </template>
           <!-- If there are no Accounts to display -->
           <template lwc:else>
            <p>No records to display...</p>
        </template>
    </div>
    </article>
</template>



***** acctList js ***** 
import { LightningElement,api,wire } from 'lwc';
import getTopAccounts from '@salesforce/apex/AccountController.getTopAccounts';
import { getRecord } from 'lightning/uiRelatedListApi';
import { refreshApex } from '@salesforce/apex';

export default class AcctList extends LightningElement {
    @api recordId;
    Id;
    Name;
    selectedId;
    selectedName;
    showForm = false;
    idx;


    accts = []; //This will be the property to hold the account records.
    results; //property to hold the object that is provisioned from the wire service
    acctsToDisplay = false; //property to determine if we have accts records returned

   

    @wire(getTopAccounts)
    wireAccounts(acctRecords){

        this.results = acctRecords;


        if(this.results.data){
            this.accts = this.results.data;
            this.acctsToDisplay = true;
            
            console.log(this.results.data);

        }

        if(this.results.error){
            console.error('Error retrieving Accounts...');
            this.acctsToDisplay = false;
        }

    }
   
    renderedCallback(){
        console.log(this.accts);
    }

 handleAcctEvent(event){
        this.Id = event.detail.acctId;
        this.Name = event.detail.acctName;
        this.idx = event.detail.idx;
    }

    refreshRecords(){
        refreshApex(this.results);
    }
    
}// end of acctList.js


***** acctList js-meta.xml ***** 

<?xml version="1.0" encoding="UTF-8"?>
<LightningComponentBundle xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>59.0</apiVersion>
    <isExposed>true</isExposed>
    <masterLabel>Account List Component</masterLabel>
    <description>This component demonstrates using the getRelatedListRecords wire adaptor function.</description>
    <targets>
        <target>lightning__RecordPage</target>
        <target>lightning__AppPage</target>
    </targets>
</LightningComponentBundle>

***** acctCard html ***** 
<template>
    <lightning-card>
        <div class="slds-grid slds-gutters">
            <article class="slds-tile">
                <h3 class="slds-tile__title" title="Account Card Component" onclick={acctSelected}>
                    <a>{idx}. {acctName}</a>
                  </h3>
                  <div class="slds-tile__detail">
                    <dl class="slds-list_horizontal slds-wrap">
                        <dt class="slds-item_label  slds-text-color_weak" title="Annual Revenue Label">Annual Revenue: </dt>
                        <dd class="slds-item_detail" title="Annual Revenue value">
                            <lightning-formatted-number value={annualRevenue} format-style="currency"></lightning-formatted-number>
                        </dd>
                        <dt class="slds-item_label slds-text-color_weak" title="Phone Label">Phone: </dt>
                        <dd class="slds-item_detail" title="Phone value">{phone}</dd>
                    </dl>
                  </div>
            </article>
        </div>
    </lightning-card>
    
</template>


***** acctCard js files ***** 
import { LightningElement,api } from 'lwc';

export default class AcctCard extends LightningElement {
    @api acctId;
    @api acctName;
    @api annualRevenue;
    @api phone;
    @api idx = ["1","2","3","4","5"];

   

//method that stores the custom event
acctSelected(){

const acctSelected = new CustomEvent('acctcustomevent', {detail: {acctId: this.acctId, acctName: this.acctName, idx: this.idx}});

console.log('Test');
console.log('The current account Id and account name  is:' + this.acctId + ' ' + this.acctName + this.idx);

// dispatch my custom event
this.dispatchEvent(acctSelected);

}
}